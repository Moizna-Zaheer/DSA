#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent a graph edge
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent;
    int rank;
};

// Comparator function to sort edges by their weights
bool compareEdges(const Edge& a, const Edge& b) {
    return a.weight < b.weight;
}

// Find set of an element i (uses path compression technique)
int find(vector<Subset>& subsets, int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);

    return subsets[i].parent;
}

// Perform union of two sets of x and y (uses union by rank)
void Union(vector<Subset>& subsets, int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Function to construct and print MST for a graph represented using adjacency list
void KruskalMST(vector<Edge>& edges, int V) {
    // Result vector to store the MST
    vector<Edge> result;

    // Sort all the edges in non-decreasing order of their weight
    sort(edges.begin(), edges.end(), compareEdges);

    // Allocate memory for creating V subsets
    vector<Subset> subsets(V);

    // Initialize each subset with its parent and rank
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Index variable to iterate through sorted edges
    int e = 0;

    // MST should have V-1 edges
    while (result.size() < V - 1) {
        // Pick the smallest edge
        Edge next_edge = edges[e++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        // If including this edge doesn't cause cycle, include it in the result and increment the index
        if (x != y) {
            result.push_back(next_edge);
            Union(subsets, x, y);
        }
    }

    // Print the constructed MST
    cout << "Edges in MST:\n";
    for (auto edge : result) {
        cout << edge.src << " - " << edge.dest << " : " << edge.weight << "\n";
    }
}

int main() {
    // Sample graph represented as a vector of edges
    vector<Edge> edges = { {0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4} };
    int V = 4; // Number of vertices in the graph

    // Find and print the MST
    KruskalMST(edges, V);

    return 0;
}
